#!/usr/bin/env node

const http = require('http');
const url = require('url');
const db = require('./database');

const port = 3001;

// –ü—Ä–æ—Å—Ç–æ–π CORS middleware
function setCORSHeaders(res) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.setHeader('Content-Type', 'application/json');
}

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
function parseJSON(req) {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', () => {
            try {
                resolve(JSON.parse(body));
            } catch (e) {
                resolve({});
            }
        });
    });
}

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(async (req, res) => {
    setCORSHeaders(res);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    const parsedUrl = url.parse(req.url, true);
    const path = parsedUrl.pathname;
    
    console.log(`${new Date().toISOString()} - ${req.method} ${path}`);
    
    try {
        // –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        if (path === '/api/test' && req.method === 'GET') {
            res.writeHead(200);
            res.end(JSON.stringify({
                success: true,
                message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
                timestamp: new Date().toISOString(),
                environment: 'production'
            }));
            return;
        }
        
        // –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (path === '/api/db-status' && req.method === 'GET') {
            try {
                const result = await db.getAllProducts();
                res.writeHead(200);
                res.end(JSON.stringify({
                    success: true,
                    dbConnected: result.success,
                    productsCount: result.success ? result.products.length : 0
                }));
            } catch (error) {
                res.writeHead(200);
                res.end(JSON.stringify({
                    success: false,
                    dbConnected: false,
                    error: error.message
                }));
            }
            return;
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if (path === '/api/products' && req.method === 'GET') {
            try {
                console.log('–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
                const result = await db.getAllProducts();
                if (result.success) {
                    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${result.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
                    res.writeHead(200);
                    res.end(JSON.stringify(result));
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', result.error);
                    res.writeHead(500);
                    res.end(JSON.stringify(result));
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
                res.writeHead(500);
                res.end(JSON.stringify({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
            }
            return;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (path === '/api/products' && req.method === 'POST') {
            try {
                const body = await parseJSON(req);
                console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', body);
                
                const result = await db.createProduct({
                    name: body.name,
                    description: body.description,
                    price: parseFloat(body.price),
                    points: parseInt(body.points) || 0,
                    image: body.image || null
                });
                
                if (result.success) {
                    console.log('–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, ID:', result.productId);
                    res.writeHead(200);
                    res.end(JSON.stringify({ success: true, productId: result.productId }));
                } else {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', result.error);
                    res.writeHead(500);
                    res.end(JSON.stringify(result));
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
                res.writeHead(500);
                res.end(JSON.stringify({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
            }
            return;
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π
        if (path === '/api/articles' && req.method === 'GET') {
            try {
                const result = await db.getAllArticles();
                if (result.success) {
                    res.writeHead(200);
                    res.end(JSON.stringify(result));
                } else {
                    res.writeHead(500);
                    res.end(JSON.stringify(result));
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error);
                res.writeHead(500);
                res.end(JSON.stringify({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
            }
            return;
        }
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if (path === '/api/auth/login' && req.method === 'POST') {
            try {
                const body = await parseJSON(req);
                const { username, password } = body;
                
                // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const user = await db.findUserByUsername(username);
                if (!user) {
                    res.writeHead(401);
                    res.end(JSON.stringify({ success: false, error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }));
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ, –±–µ–∑ bcrypt)
                if (password !== user.password) {
                    res.writeHead(401);
                    res.end(JSON.stringify({ success: false, error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }));
                    return;
                }
                
                // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
                const { password: _, ...userWithoutPassword } = user;
                
                res.writeHead(200);
                res.end(JSON.stringify({
                    success: true,
                    user: userWithoutPassword,
                    token: 'dummy-token'
                }));
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
                res.writeHead(500);
                res.end(JSON.stringify({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
            }
            return;
        }
        
        // 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
        res.writeHead(404);
        res.end(JSON.stringify({ success: false, error: 'Not Found' }));
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.writeHead(500);
        res.end(JSON.stringify({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startSimpleServer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
        console.log('üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const dbInitialized = await db.initializeDatabase();
        if (!dbInitialized) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.');
        } else {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.listen(port, '0.0.0.0', () => {
            console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
            console.log(`üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://89.104.66.62:${port}/api/`);
            console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: http://89.104.66.62:${port}/api/test`);
            console.log(`üìä –°—Ç–∞—Ç—É—Å –ë–î: http://89.104.66.62:${port}/api/db-status`);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

startSimpleServer(); 