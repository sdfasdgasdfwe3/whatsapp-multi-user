const express = require('express');
const cors = require('cors');
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode');
const https = require('https');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const db = require('./database');

const app = express();
const port = 3001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    next();
});
app.use(express.json());
app.use(express.static('.'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è preflight –∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', (req, res) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.sendStatus(200);
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ WhatsApp –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const activeClients = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ WhatsApp –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createWhatsAppClient(userId) {
    const client = new Client({
        authStrategy: new LocalAuth({
            clientId: `whatsapp-client-${userId}`,
            dataPath: `./.wwebjs_auth/user_${userId}`
        }),
        puppeteer: {
            headless: true,
            args: [
                '--no-sandbox', 
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu',
                '--disable-web-security',
                '--disable-extensions',
                '--disable-plugins',
                '--disable-background-timer-throttling',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding',
                '--disable-field-trial-config',
                '--disable-ipc-flooding-protection',
                '--enable-logging',
                '--log-level=0',
                '--force-color-profile=srgb',
                '--metrics-recording-only',
                '--disable-default-apps',
                '--disable-sync',
                '--disable-translate',
                '--hide-scrollbars',
                '--mute-audio',
                '--no-default-browser-check',
                '--safebrowsing-disable-auto-update',
                '--disable-client-side-phishing-detection',
                '--disable-component-update',
                '--disable-domain-reliability',
                '--disable-hang-monitor',
                '--disable-prompt-on-repost',
                '--disable-background-networking',
                '--disable-background-downloads',
                '--disable-background-upload'
            ],
            timeout: 60000,
            protocolTimeout: 60000
        }
    });

    let qrCodeData = null;
    let isConnected = false;
    let isInitializing = true;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    client.on('qr', async (qr) => {
        console.log(`QR Code received for user ${userId}:`, qr);
        isInitializing = false;
        
        try {
            const qrImage = await qrcode.toDataURL(qr);
            qrCodeData = qrImage;
            console.log(`QR code image generated successfully for user ${userId}`);
        } catch (err) {
            console.error(`Error generating QR code for user ${userId}:`, err);
            qrCodeData = qr;
        }
    });

    // –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤
    client.on('ready', () => {
        console.log(`WhatsApp client is ready for user ${userId}!`);
        isConnected = true;
        isInitializing = false;
        qrCodeData = null;
    });

    // –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è
    client.on('disconnected', (reason) => {
        console.log(`WhatsApp client was disconnected for user ${userId}:`, reason);
        isConnected = false;
        qrCodeData = null;
        isInitializing = false;
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    client.on('auth_failure', (msg) => {
        console.log(`Auth failure for user ${userId}:`, msg);
        isConnected = false;
        qrCodeData = null;
        isInitializing = false;
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    function checkInternetConnection() {
        return new Promise((resolve) => {
            const req = https.get('https://www.google.com', (res) => {
                resolve(true);
            });
            
            req.on('error', (err) => {
                console.log('Internet connection check failed:', err.message);
                resolve(false);
            });
            
            req.setTimeout(5000, () => {
                req.destroy();
                resolve(false);
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    async function initializeClient(retryCount = 0) {
        const maxRetries = 3;
        
        try {
            console.log(`Attempting to initialize WhatsApp client for user ${userId} (attempt ${retryCount + 1}/${maxRetries + 1})...`);
            
            const hasInternet = await checkInternetConnection();
            if (!hasInternet) {
                throw new Error('No internet connection available');
            }
            
            await client.initialize();
        } catch (err) {
            console.error(`Error initializing WhatsApp client for user ${userId} (attempt ${retryCount + 1}):`, err.message);
            
            if (retryCount < maxRetries) {
                console.log(`Retrying in 5 seconds...`);
                setTimeout(() => {
                    initializeClient(retryCount + 1);
                }, 5000);
            } else {
                console.error(`Max retries reached for user ${userId}. WhatsApp client initialization failed.`);
                isInitializing = false;
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    initializeClient();

    return {
        client,
        getStatus: () => ({ isConnected, isInitializing, qrCodeData }),
        getClient: () => client
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeServer() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
    const dbInitialized = await db.initializeDatabase();
    if (!dbInitialized) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(port, () => {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        console.log(`üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${port}`);
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initializeServer();

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
client.on('qr', async (qr) => {
    console.log('QR Code received:', qr);
    isInitializing = false;
    qrCodeData = qr;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try {
        const qrImage = await qrcode.toDataURL(qr);
        qrCodeData = qrImage;
        console.log('QR code image generated successfully');
    } catch (err) {
        console.error('Error generating QR code:', err);
    }
});

// –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤
client.on('ready', () => {
    console.log('WhatsApp client is ready!');
    isConnected = true;
    isInitializing = false;
    qrCodeData = null;
});

// –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è
client.on('disconnected', (reason) => {
    console.log('WhatsApp client was disconnected:', reason);
    isConnected = false;
    qrCodeData = null;
    isInitializing = false;
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function checkInternetConnection() {
    return new Promise((resolve) => {
        const req = https.get('https://www.google.com', (res) => {
            resolve(true);
        });
        
        req.on('error', (err) => {
            console.log('Internet connection check failed:', err.message);
            resolve(false);
        });
        
        req.setTimeout(5000, () => {
            req.destroy();
            resolve(false);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function initializeClient(retryCount = 0) {
    const maxRetries = 3;
    
    try {
        console.log(`Attempting to initialize WhatsApp client (attempt ${retryCount + 1}/${maxRetries + 1})...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const hasInternet = await checkInternetConnection();
        if (!hasInternet) {
            throw new Error('No internet connection available');
        }
        
        await client.initialize();
    } catch (err) {
        console.error(`Error initializing WhatsApp client (attempt ${retryCount + 1}):`, err.message);
        
        if (retryCount < maxRetries) {
            console.log(`Retrying in 5 seconds...`);
            setTimeout(() => {
                initializeClient(retryCount + 1);
            }, 5000);
        } else {
            console.error('Max retries reached. WhatsApp client initialization failed.');
            isInitializing = false;
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
initializeClient();

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
client.on('auth_failure', (msg) => {
    console.log('Auth failure:', msg);
    isConnected = false;
    qrCodeData = null;
    isInitializing = false;
});

// API endpoints

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/whatsapp/status/:userId', (req, res) => {
    const userId = req.params.userId;
    
    if (!activeClients.has(userId)) {
        return res.json({
            connected: false,
            qrCode: null,
            initializing: false,
            error: 'Client not initialized'
        });
    }
    
    const { isConnected, isInitializing, qrCodeData } = activeClients.get(userId).getStatus();
    
    res.json({
        connected: isConnected,
        qrCode: qrCodeData,
        initializing: isInitializing
    });
});

// –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/whatsapp/qr/:userId', (req, res) => {
    const userId = req.params.userId;
    
    console.log(`QR request for user ${userId}`);
    
    if (!activeClients.has(userId)) {
        console.log(`Creating new WhatsApp client for user ${userId}`);
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const clientWrapper = createWhatsAppClient(userId);
        activeClients.set(userId, clientWrapper);
    }
    
    const { isConnected, isInitializing, qrCodeData } = activeClients.get(userId).getStatus();
    
    console.log(`QR request for user ${userId} - isInitializing: ${isInitializing} isConnected: ${isConnected} qrCodeData: ${!!qrCodeData}`);
    
    if (isInitializing) {
        res.json({ error: 'Initializing WhatsApp client, please wait...' });
    } else if (qrCodeData) {
        res.json({ qrCode: qrCodeData });
    } else if (isConnected) {
        res.json({ connected: true });
    } else {
        res.json({ error: 'QR code not available, try again in a few seconds' });
    }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/whatsapp/send/:userId', async (req, res) => {
    const userId = req.params.userId;
    const { number, message } = req.body;
    
    if (!activeClients.has(userId)) {
        return res.status(400).json({ error: 'WhatsApp client not initialized' });
    }
    
    const clientWrapper = activeClients.get(userId);
    const { isConnected } = clientWrapper.getStatus();
    
    if (!isConnected) {
        return res.status(400).json({ error: 'WhatsApp not connected' });
    }

    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const formattedNumber = number.replace(/\D/g, '');
        const chatId = `${formattedNumber}@c.us`;
        
        await clientWrapper.getClient().sendMessage(chatId, message);
        res.json({ success: true, message: 'Message sent successfully' });
    } catch (error) {
        console.error('Error sending message:', error);
        res.status(500).json({ error: 'Failed to send message' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/whatsapp/chats/:userId', async (req, res) => {
    const userId = req.params.userId;
    
    if (!activeClients.has(userId)) {
        return res.status(400).json({ error: 'WhatsApp client not initialized' });
    }
    
    const clientWrapper = activeClients.get(userId);
    const { isConnected } = clientWrapper.getStatus();
    
    if (!isConnected) {
        return res.status(400).json({ error: 'WhatsApp not connected' });
    }

    try {
        const chats = await clientWrapper.getClient().getChats();
        
        // –†–∞–∑–¥–µ–ª—è–µ–º —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã
        const privateChats = [];
        const groupChats = [];
        
        for (const chat of chats) {
            let chatName = chat.name;
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∏ –∏–º—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
            if (!chat.isGroup && !chatName) {
                try {
                    const contact = await clientWrapper.getClient().getContactById(chat.id._serialized);
                    if (contact && contact.pushname) {
                        chatName = contact.pushname;
                    } else if (contact && contact.name) {
                        chatName = contact.name;
                    } else {
                        // –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        const phoneNumber = chat.id.user;
                        chatName = `+${phoneNumber.slice(0, 1)} ${phoneNumber.slice(1, 4)} ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 9)}-${phoneNumber.slice(9, 11)}`;
                    }
                } catch (contactError) {
                    console.log('Error getting contact info:', contactError.message);
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ fallback
                    const phoneNumber = chat.id.user;
                    chatName = `+${phoneNumber.slice(0, 1)} ${phoneNumber.slice(1, 4)} ${phoneNumber.slice(4, 7)}-${phoneNumber.slice(7, 9)}-${phoneNumber.slice(9, 11)}`;
                }
            }
            
            const chatData = {
                id: chat.id._serialized,
                name: chatName || chat.id.user
            };
            
            if (chat.isGroup) {
                groupChats.push(chatData);
            } else {
                privateChats.push(chatData);
            }
        }
        
        res.json({ 
            privateChats: privateChats,
            groupChats: groupChats
        });
    } catch (error) {
        console.error('Error getting chats:', error);
        res.status(500).json({ error: 'Failed to get chats' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/whatsapp/contact/:userId/:contactId', async (req, res) => {
    const userId = req.params.userId;
    const contactId = req.params.contactId;
    
    if (!activeClients.has(userId)) {
        return res.status(400).json({ error: 'WhatsApp client not initialized' });
    }
    
    const clientWrapper = activeClients.get(userId);
    const { isConnected } = clientWrapper.getStatus();
    
    if (!isConnected) {
        return res.status(400).json({ error: 'WhatsApp not connected' });
    }

    try {
        const contact = await clientWrapper.getClient().getContactById(contactId);
        
        if (contact) {
            res.json({
                id: contact.id._serialized,
                name: contact.name || contact.pushname || contact.id.user,
                pushname: contact.pushname,
                number: contact.id.user,
                isGroup: contact.isGroup || false
            });
        } else {
            res.status(404).json({ error: 'Contact not found' });
        }
    } catch (error) {
        console.error('Error getting contact:', error);
        res.status(500).json({ error: 'Failed to get contact' });
    }
});

// –û—Ç–∫–ª—é—á–∏—Ç—å WhatsApp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/whatsapp/disconnect/:userId', async (req, res) => {
    const userId = req.params.userId;
    
    if (!activeClients.has(userId)) {
        return res.status(400).json({ error: 'Client not found' });
    }
    
    try {
        const clientWrapper = activeClients.get(userId);
        await clientWrapper.getClient().destroy();
        activeClients.delete(userId);
        
        res.json({ success: true, message: 'WhatsApp disconnected' });
    } catch (error) {
        console.error('Error disconnecting:', error);
        res.status(500).json({ error: 'Failed to disconnect' });
    }
});

// –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å WhatsApp –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/whatsapp/restart/:userId', async (req, res) => {
    const userId = req.params.userId;
    
    try {
        console.log(`Restarting WhatsApp client for user ${userId}...`);
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
        if (activeClients.has(userId)) {
            try {
                await activeClients.get(userId).getClient().destroy();
            } catch (err) {
                console.log('Client already destroyed or error destroying:', err.message);
            }
            activeClients.delete(userId);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        const clientWrapper = createWhatsAppClient(userId);
        activeClients.set(userId, clientWrapper);
        
        res.json({ success: true, message: 'WhatsApp client restarting' });
    } catch (error) {
        console.error('Error restarting:', error);
        res.status(500).json({ error: 'Failed to restart' });
    }
});

// –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é WhatsApp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/whatsapp/clear-session/:userId', async (req, res) => {
    const userId = req.params.userId;
    
    try {
        console.log(`Clearing WhatsApp session for user ${userId}...`);
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç
        if (activeClients.has(userId)) {
            try {
                await activeClients.get(userId).getClient().destroy();
            } catch (err) {
                console.log('Client already destroyed or error destroying:', err.message);
            }
            activeClients.delete(userId);
        }
        
        res.json({ success: true, message: 'WhatsApp session cleared' });
    } catch (error) {
        console.error('Error clearing session:', error);
        res.status(500).json({ error: 'Failed to clear session' });
    }
});

// ===== MIDDLEWARE –î–õ–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò =====

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
    
    if (!token) {
        return res.status(401).json({ success: false, error: 'Access token required' });
    }
    
    jwt.verify(token, 'your-secret-key', (err, user) => {
        if (err) {
            return res.status(403).json({ success: false, error: 'Invalid or expired token' });
        }
        req.user = user;
        next();
    });
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function requireAdmin(req, res, next) {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ success: false, error: 'Admin access required' });
    }
    next();
}

// ===== API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• =====

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/test', (req, res) => {
    res.json({ 
        success: true, 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString()
    });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/api/db-status', async (req, res) => {
    try {
        const result = await db.getAllProducts();
        res.json({ 
            success: true, 
            dbConnected: result.success,
            productsCount: result.success ? result.products.length : 0
        });
    } catch (error) {
        res.json({ 
            success: false, 
            dbConnected: false,
            error: error.message 
        });
    }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.post('/api/auth/register', async (req, res) => {
    try {
        const { username, password, fullName, email } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await db.findUserByUsername(username);
        if (existingUser) {
            return res.status(400).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(password, 10);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = await db.createUser({
            username,
            password: hashedPassword,
            fullName,
            email,
            role: 'user'
        });
        
        if (result.success) {
            res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
        } else {
            res.status(500).json({ success: false, error: result.error });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/auth/login', async (req, res) => {
    try {
        const { username, password } = req.body;
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.findUserByUsername(username);
        if (!user) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isValidPassword = await bcrypt.compare(password, user.password);
        if (!isValidPassword) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            { userId: user.id, username: user.username, role: user.role },
            'your-secret-key', // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            { expiresIn: '24h' }
        );
        
        // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const { password: _, ...userWithoutPassword } = user;
        
        res.json({
            success: true,
            user: userWithoutPassword,
            token
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
app.get('/api/products', async (req, res) => {
    try {
        const result = await db.getAllProducts();
        if (result.success) {
            res.json(result);
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.post('/api/products', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { name, description, price, points, image } = req.body;
        
        const result = await db.createProduct({
            name,
            description,
            price: parseFloat(price),
            points: parseInt(points) || 0,
            image: image || null
        });
        
        if (result.success) {
            res.json({ success: true, productId: result.productId });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.put('/api/products/:id', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description, price, points, image } = req.body;
        
        const result = await db.updateProduct(parseInt(id), {
            name,
            description,
            price: parseFloat(price),
            points: parseInt(points) || 0,
            image: image || null
        });
        
        if (result.success) {
            res.json({ success: true });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.delete('/api/products/:id', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const result = await db.deleteProduct(parseInt(id));
        
        if (result.success) {
            res.json({ success: true });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è —Å—Ç–∞—Ç–µ–π
app.get('/api/articles', async (req, res) => {
    try {
        const result = await db.getAllArticles();
        if (result.success) {
            res.json(result);
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.post('/api/articles', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { title, content, author, image } = req.body;
        
        const result = await db.createArticle({
            title,
            content,
            author,
            image: image || null
        });
        
        if (result.success) {
            res.json({ success: true, articleId: result.articleId });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.put('/api/articles/:id', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { title, content, author, image } = req.body;
        
        const result = await db.updateArticle(parseInt(id), {
            title,
            content,
            author,
            image: image || null
        });
        
        if (result.success) {
            res.json({ success: true });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.delete('/api/articles/:id', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const result = await db.deleteArticle(parseInt(id));
        
        if (result.success) {
            res.json({ success: true });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ===== API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =====

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.get('/api/admin/users', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const result = await db.getAllUsers();
        if (result.success) {
            res.json(result);
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/profile', authenticateToken, async (req, res) => {
    try {
        const user = await db.findUserById(req.user.userId);
        if (user) {
            const { password, ...userWithoutPassword } = user;
            res.json({ success: true, user: userWithoutPassword });
        } else {
            res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/user/profile', authenticateToken, async (req, res) => {
    try {
        const { fullName, email } = req.body;
        
        const result = await db.updateUser(req.user.userId, {
            fullName,
            email
        });
        
        if (result.success) {
            res.json({ success: true, message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.put('/api/admin/users/:userId/role', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { userId } = req.params;
        const { role } = req.body;
        
        if (!['admin', 'user'].includes(role)) {
            return res.status(400).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å' });
        }
        
        const result = await db.updateUserRole(parseInt(userId), role);
        
        if (result.success) {
            res.json({ success: true, message: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.delete('/api/admin/users/:userId', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { userId } = req.params;
        
        // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if (parseInt(userId) === req.user.userId) {
            return res.status(400).json({ success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' });
        }
        
        const result = await db.deleteUser(parseInt(userId));
        
        if (result.success) {
            res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è —á–∞—Ç–æ–≤
app.get('/api/chats/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const result = await db.getUserChats(parseInt(userId));
        
        if (result.success) {
            res.json(result);
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/chats', async (req, res) => {
    try {
        const { userId, contactName, contactNumber, lastMessage } = req.body;
        
        const result = await db.createChat({
            userId: parseInt(userId),
            contactName,
            contactNumber,
            lastMessage
        });
        
        if (result.success) {
            res.json({ success: true, chatId: result.chatId });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages/:chatId', async (req, res) => {
    try {
        const { chatId } = req.params;
        const result = await db.getChatMessages(parseInt(chatId));
        
        if (result.success) {
            res.json(result);
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/messages', async (req, res) => {
    try {
        const { chatId, messageText, isFromMe } = req.body;
        
        const result = await db.createMessage({
            chatId: parseInt(chatId),
            messageText,
            isFromMe: Boolean(isFromMe)
        });
        
        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            await db.updateChatLastMessage(parseInt(chatId), messageText);
            
            res.json({ success: true, messageId: result.messageId });
        } else {
            res.status(500).json(result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ===== API –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê =====

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.get('/api/admin/stats', authenticateToken, requireAdmin, async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersResult = await db.getAllUsers();
        const productsResult = await db.getAllProducts();
        const articlesResult = await db.getAllArticles();
        
        const stats = {
            users: {
                total: usersResult.success ? usersResult.users.length : 0,
                admins: usersResult.success ? usersResult.users.filter(u => u.role === 'admin').length : 0,
                regular: usersResult.success ? usersResult.users.filter(u => u.role === 'user').length : 0
            },
            products: {
                total: productsResult.success ? productsResult.products.length : 0
            },
            articles: {
                total: articlesResult.success ? articlesResult.articles.length : 0
            },
            whatsapp: {
                activeClients: activeClients.size,
                connectedClients: Array.from(activeClients.values()).filter(client => client.getStatus().isConnected).length
            },
            system: {
                uptime: process.uptime(),
                memory: process.memoryUsage(),
                timestamp: new Date().toISOString()
            }
        };
        
        res.json({ success: true, stats });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ WhatsApp —Å–µ—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.get('/api/admin/whatsapp-sessions', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const sessions = [];
        
        for (const [userId, clientWrapper] of activeClients) {
            const status = clientWrapper.getStatus();
            sessions.push({
                userId: parseInt(userId),
                connected: status.isConnected,
                initializing: status.isInitializing,
                hasQrCode: !!status.qrCodeData
            });
        }
        
        res.json({ success: true, sessions });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π WhatsApp:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});