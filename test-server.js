#!/usr/bin/env node

const http = require('http');
const url = require('url');

const port = 3001;

const server = http.createServer((req, res) => {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.setHeader('Content-Type', 'application/json');
    
    const parsedUrl = url.parse(req.url, true);
    const path = parsedUrl.pathname;
    
    console.log(`${new Date().toISOString()} - ${req.method} ${path}`);
    
    // OPTIONS preflight
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    // Test endpoint
    if (path === '/api/test' && req.method === 'GET') {
        res.writeHead(200);
        res.end(JSON.stringify({
            success: true,
            message: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            timestamp: new Date().toISOString()
        }));
        return;
    }
    
    // Products endpoint
    if (path === '/api/products' && req.method === 'GET') {
        res.writeHead(200);
        res.end(JSON.stringify({
            success: true,
            products: [
                {
                    id: 1,
                    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç',
                    description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç',
                    price: '1000 ‚ÇΩ',
                    points: 10,
                    image: 'https://via.placeholder.com/200x200/667eea/ffffff?text=–¢–µ—Å—Ç'
                }
            ]
        }));
        return;
    }
    
    // Articles endpoint
    if (path === '/api/articles' && req.method === 'GET') {
        res.writeHead(200);
        res.end(JSON.stringify({
            success: true,
            articles: [
                {
                    id: 1,
                    title: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è',
                    content: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞',
                    author: '–¢–µ—Å—Ç',
                    created_at: new Date().toISOString(),
                    image: 'https://via.placeholder.com/200x200/667eea/ffffff?text=–°—Ç–∞—Ç—å—è'
                }
            ]
        }));
        return;
    }
    
    // 404
    res.writeHead(404);
    res.end(JSON.stringify({ success: false, error: 'Not Found' }));
});

server.listen(port, '0.0.0.0', () => {
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log(`üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://89.104.66.62:${port}/api/`);
    console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: http://89.104.66.62:${port}/api/test`);
});

server.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    if (error.code === 'EADDRINUSE') {
        console.log(`üí° –ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
    }
    process.exit(1);
}); 